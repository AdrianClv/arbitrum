/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface ICustomGatewayInterface extends ethers.utils.Interface {
  functions: {
    'l1ToL2Token(address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'l1ToL2Token', values: [string]): string

  decodeFunctionResult(functionFragment: 'l1ToL2Token', data: BytesLike): Result

  events: {
    'TokenSet(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'TokenSet'): EventFragment
}

export class ICustomGateway extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: ICustomGatewayInterface

  functions: {
    l1ToL2Token(
      _l1Token: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _l2Token: string }>

    'l1ToL2Token(address)'(
      _l1Token: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _l2Token: string }>
  }

  l1ToL2Token(_l1Token: string, overrides?: CallOverrides): Promise<string>

  'l1ToL2Token(address)'(
    _l1Token: string,
    overrides?: CallOverrides
  ): Promise<string>

  callStatic: {
    l1ToL2Token(_l1Token: string, overrides?: CallOverrides): Promise<string>

    'l1ToL2Token(address)'(
      _l1Token: string,
      overrides?: CallOverrides
    ): Promise<string>
  }

  filters: {
    TokenSet(l1Address: string | null, l2Address: string | null): EventFilter
  }

  estimateGas: {
    l1ToL2Token(_l1Token: string, overrides?: CallOverrides): Promise<BigNumber>

    'l1ToL2Token(address)'(
      _l1Token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    l1ToL2Token(
      _l1Token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'l1ToL2Token(address)'(
      _l1Token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
